package com.teamtodev.chatroom.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import lombok.extern.log4j.Log4j2;

@Controller
@Log4j2
public class ChatController {

    /**
     * 채팅 페이지에 접근하는 메서드입니다.
     * 
     * @param request HttpServletRequest 객체로, 현재 요청에 대한 정보를 제공합니다.
     * @param id 채팅에 참여하는 사용자의 ID입니다. (guest 또는 master)
     */
    @GetMapping("/chat")
    public void getChat(HttpServletRequest request, @RequestParam String id) {
        // 현재 요청과 관련된 세션을 가져옵니다. 세션이 없으면 새로 생성됩니다.
        HttpSession session = request.getSession();
        
        // ID가 "guest"인 경우
        if (id.equals("guest")) {
            // 세션의 고유한 식별자를 가져와 "guest" 접두사와 함께 세션 ID를 이름으로 사용합니다.
            String name = "guest" + session.toString().substring(session.toString().indexOf("@"));
            // 세션에 "sessionId"라는 이름으로 이름을 저장합니다.
            session.setAttribute("sessionId", name);
        } 
        // ID가 "master"인 경우
        else if(id.equals("master")) {
            // "master"라는 이름을 사용합니다.
            String name = "master";
            // 세션에 "sessionId"라는 이름으로 이름을 저장합니다.
            session.setAttribute("sessionId", name);
        }

        // 로깅 기능을 사용하여 메서드가 호출되었음을 기록합니다.
        log.info("@ChatController, getChat()");
    }

    /**
     * "master" 역할로 채팅 페이지에 접근하는 메서드입니다.
     * 
     * @param request HttpServletRequest 객체로, 현재 요청에 대한 정보를 제공합니다.
     * @return 채팅 페이지의 경로를 반환합니다.
     */
    @GetMapping("/chat/master")
    public String enterChatAsMaster(HttpServletRequest request) {
        // 로깅 기능을 사용하여 메서드가 호출되었음을 기록합니다.
        log.info("@ChatController, enterChatAsMaster()");

        // "/chat" 경로의 뷰를 반환합니다. 
        return "/chat";
    }
}
