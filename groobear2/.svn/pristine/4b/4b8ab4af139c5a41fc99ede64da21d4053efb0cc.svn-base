const employeeCalendar = document.querySelector("#employeeCalendar");

//캘린더 헤더 옵션
const headerToolbar = {
	left : "prev next"
	, center : "title"
	, right : "today dayGridMonth"
}

// 캘린더 생성 옵션(참공)
const calendarOption = {
	height : "800px"					// calendar 높이 설정
	, expandRows : true				// 화면에 맞게 높이 재설정
//	, slotMinTime : "09 : 00"			// Day 캘린더 시작 시간
//	, slotMaxTime : "18 : 00"			// Day 캘린더 종료 시간
	, headerToolbar : headerToolbar	// 맨 위 헤더 지정
	, initialView : "dayGridMonth"	// default : dayGridMonth "dayGridWeek", "timeGridDay", "listWeek"
	, locale : "kr"					// 언어 설정
	, selectable : true				// 영역 선택
	, selectMirror : true			// 오직 TimeGrid view에만 적용됨, default false
	, navLinks : true				// 날짜, WeekNumber 클릭 여부, default false
//	, weekNumbers : true				// WeekNumber 출력여부, default false
	, editable : true				// event(일정) 
	, dayMaxEventRows : true			// Row 높이보다 많으면 + 숫자 more 링크 보임!
	, nowIndicator : true
//	, events: function(info, successCallback, failureCallback) {
//		let emplNo = "\${empl.emplNo}";
//		console.log("뭐냐 너 ", emplNo);
//		fetch("/employee/emplNo")
//		.then(response => {
//			if (!response.ok) {
//				throw new Error("Network response was not ok");
//			}
//			return response.json();
//		})
//		.then(data => {
//			let events = data.map(atdc => ({
//				title : `출근: ${atdc.attendDt}, 퇴근: ${atdc.lvffcDt}`
//				, start: atdc.dclzDe
//				, allDay: true
//				,backgroundColor: "green"
//			}));
//			successCallback(events);
//		})
//		.catch(error => {
//			console.error("Error fetching events:", error);
//			failureCallback(error);
//		});
//	}
/* 시작일 및 기간 수정가능여부
	eventStartEditable : false,
	eventDurationEditable : true,
*/
//	, views : {
//		dayGridMonth : {
//	    	dayMaxEventRows : 3
//		}
//	}
//events :[],
}

function fCalAdd(pList) {
// 여기서 FullCalendar가 원하는 모습으로 데이터 변형이 필요
//	console.log("체크 : ", pList);

	for(let i=0; i<pList.length; i++){
		let start = pList[i].start.split(" ")[0];  + "T" + pList[i].start.split(" ")[1].substr(0,5);
		let end=start;

		let title = "출근 = " + pList[i].start.split(" ")[1].substr(0,5);
		let event = {
			start
			, end
			, title
			, backgroundColor : "skyblue"
			, borderColor : "skyblue"
		}
		calendar.addEvent(event);   // 출근 넣기

		if(pList[i].end){
			title = "퇴근 = " + pList[i].end.split(" ")[1].substr(0,5);
			let event = {
				start
				, end
				, title
				, backgroundColor : "pink"
				, borderColor : "pink"
			}
			calendar.addEvent(event);   // 퇴근 넣기
		}
//		console.log("체크:",event);
	}

/*
	let event = {
		start: mySchStart.value
		, end: mySchEnd.value
		, backgroundColor: bColor
		, textColor: tColor
	};

	calendar.addEvent(event);
*/
}

// 캘린더 생성
const calendar = new FullCalendar.Calendar(employeeCalendar, calendarOption);
// 캘린더 그리기
calendar.render();