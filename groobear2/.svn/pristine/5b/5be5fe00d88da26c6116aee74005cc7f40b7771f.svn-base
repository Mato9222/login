package com.teamtodev.main.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.teamtodev.board.service.PostService;
import com.teamtodev.board.vo.PostVO;
import com.teamtodev.employees.service.EmployeeService;
import com.teamtodev.employees.vo.EmployeeVO;
import com.teamtodev.employees.vo.EmployeeVOWrapper;
import com.teamtodev.mail.service.MailService;
import com.teamtodev.mail.vo.MailVO;
import com.teamtodev.main.service.MainService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class indexController {
	@Autowired
	private MainService mainService;
	
	@Autowired
	private MailService mailService; // 메일 서비스
	
	@Autowired
	private EmployeeService emplService; // 사원 서비스
	
//	@Autowired
//	private PostService postService; // 게시글 서비스
	
	
	@GetMapping("/index.do")
	public String index(Model model
			, HttpSession session
			, Authentication auth ) {
		
		leftMenu(model, session, auth);
		
		return "index";
	}
	
//	인덱스에서는 되는데 다른 레프트메뉴에도 적용시킬라면 어떻게 해야할까..?
	public String leftMenu(Model model
			, HttpSession session
			, Authentication auth) {

		// 사원번호 꺼내기
		EmployeeVOWrapper userWrapper = (EmployeeVOWrapper) auth.getPrincipal();
		EmployeeVO emplVO = userWrapper.getRealUser();
		// 받은메일함 갯수
		int mailCount = mainService.receEmailCount(emplVO.getEmplNo());
		int tempCount = mainService.tempMailCount(emplVO.getEmplNo());
		
		log.info("받은 메일 갯수 : {}",mailCount);
		
		session.setAttribute("mailCount",mailCount);
		session.setAttribute("tempCount",tempCount);
		
		return "redirect:leftMenu";
	}
	
	@ResponseBody
	@GetMapping("/main/mail")
	public List<MailVO> mailList(
			Authentication auth
			) {
		// 사원번호 꺼내기
		EmployeeVOWrapper userWrapper = (EmployeeVOWrapper) auth.getPrincipal();
		EmployeeVO emplVO = userWrapper.getRealUser();
		EmployeeVO empl = emplService.selectEmployeeById(emplVO.getEmplId());
		
		// 사원번호 String 으로 변환
		String recptnEmailAdres = Integer.toString(empl.getEmplNo());

		// 받는사람, 참조를 수신자에 넣을 Map
		Map<String, Object> info = new HashMap<String, Object>();
		info.put("recptnEmailAdres",recptnEmailAdres);
		
		int emplNo = emplVO.getEmplNo();  
		
		// 받은 메일 리스트 받기
		List<MailVO> mailList = mailService.dashMail(emplNo);
		
		return mailList;	
	}

	@GetMapping("/main/post")
	@ResponseBody
	public List<PostVO> postList () {
		List<PostVO> postList = mainService.mainPost();
		
		return postList;
	}
	
}

